The <Resources> tag______________________________________________________________________________________
	The "Key" attribute
		valid ID name
	??Custom attributes are allowed

The <UI> tag______________________________________________________________________________________
	UI elements
	UI container elements
	The "Name" attribute
	??Custom attributes are also allowed
	Accessing properties of other tags, "{$}"

Value Providers______________________________________________________________________________________
	Getting a value provider using key {@sp}
	Getting a value provider using class name {StringProvider}
		You can ignore the "Provider" suffix {String}
	Nested value providers {StringProvider {String}}
	Default Property Provider {$}
	Lazy evaluation {?}
	Escaping the "{" char: "{{...}" will be interpreted to "{...}"

A Suggestion for an Element Manifest File______________
	a manifest listing the elements (and their properties) in an assembly
	<Element Name="Quic.Nothing" Type="UI|Resource" Extends="Quic.Element" IsContainer="true|false">
		<Properties>
			<Property Name="" Type="" AllowedValues=",,">
				<Description></Description>
			</Property>
		</Properties>
		<Description></Description>
	</Element>

	<ValueProvider></ValueProvider>

	<FileInitializer></FileInitializer>
===============================
Repeat and RepeatCount___________________
	Printing out RepeatCount
		doesnt work well with containers
		should be used in a lazily-evaluated attribute

Unrecognized stuff_________________
	AllowUnknownAttributes="true"
    AllowUnknownTags="TRUE"
	use <![CDATA[my escaped text]]>
	use &amp; to output & (so to output "&amp", type "&amp;amp;")

Comments________________
	<!--out: will be outputed -->

CDATA___________________
	Quic is XML compliant, so to use scripts, put them in <![CDATA[ ... ]]>
	If CDATA is not sufficient (most probably bcuz u need to include "]]>"), use a comment <!--cdata: ... -->

Model/Data Binding_________
	Not yet supported

Creating Your Own Quic Elements_______________
	System Architecture //explain how it works
Messaging___________
	Messenger.Prompt
	Messenger.Notify

[NotQuicProperty]