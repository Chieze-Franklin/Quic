<!DOCTYPE html>

<html>
	<head>
		<title>Introducing the Quic Web Development Framework - Part 2</title>
	</head>
	
	<body>
	
		<pre>
			Title:       Introducing the Quic Web Development Framework - Part 2
			Author:      Franklin Chieze
			Email:       chieze.franklin@gmail.com
			Language:    C# 5.0
			Platform:    Windows
			Technology:  .NET Framework
			Level:       Intermediate
			Description: Quic is a web development framework that enables you create rich web applications with less code than is usually needed.
			Section      Web Development
			SubSection   General
			License:     CPOL
		</pre>
		
		<link type="text/css" rel="stylesheet" href="./Quic2_files/Main.min.css">
		
		<div class="page-background">
			<div id="A" class="container-content-wrap fixed article">
				<form>
					<div class="header">
					    <a name="_articleTop" id="_articleTop"></a>
					    <div class="title">
					        <h1 id="ctl00_ArticleTitle" itemprop="name">
							Introducing the Quic <img width="32" height="32" src="./Quic2_files/quic.png" /> Web Development Framework - Part 2
							</h1> 
					    </div>
                    </div>

					<div id="contentdiv" class="text" itemprop="articleBody">
						<ul class="download">
							<li><a href="./quic_v0_1_sources.zip">Download Quic v0.1 Source Codes - 598 KB</a></li>
							<li><a href="./samples.zip">Download Quic Samples - 493 KB</a></li>
							<li><a href="https://github.com/Chieze-Franklin/Quic">GitHub repo</a></li>
						</ul>

						<h2>Introduction</h2>
						<p>
							Quic is a web development framework that enables you create rich web applications with less code than is usually needed.<br />
							Quic is basically a preprocessor; it goes through your HTML file, looking for custom tags, and producing standard HTML, CSS,
							JavaScript (and pretty much anything) from such tags.<br />
							When a custom tag is encountered Quic loads the appropriate assembly and locates a class with the same name as the tag.
							The class is then instantiated, and its <code>Render</code> method is called to emit the relevant codes and/or files.<br />
							So we can say Quic allows you to delegate the dirty jobs to a class, and include that class in your HTML file as a custom tag.
						</p>

						<h2>Background</h2>
						<p>
							In the first part of this article (<a 
							href="http://www.codeproject.com/Articles/1077305/Introducing-the-Quic-Web-Development-Framework-Par">Introducing the Quic Web 
							Development Framework - Part 1</a>) we were introduced to the Quic framework, its uses, the ideas behind it, and its advantages.<br />
							Some of the advantages we mentioned are:
							<ul>
								<li>
									<b>There are no tags.</b><br />
									Quic has no custom tags of its own. So, technically, you don't have a lot of new things to learn.
								</li>
								<li>
									<b>Works well with any XML document.</b>
								</li>
								<li>
									<b>Quic makes your code more readable.</b>
								</li>
								<li>
									<b>Easy to refactor.</b>
								</li>
								<li>
									<b>Quic does more than just emit code.</b><br />
									Quic doesn't just emit codes, it can create needed files in the output directory.
								</li>
								<li>
									<b>Works well with other web frameworks.</b><br />
									Quic works well with other web frameworks/technologies because Quic is simply a preprocessor. It goes through your file
									looking for custom tags that make sense to it. Every other content on the file is left untouched.
								</li>
							</ul>
							We ended the article with a healthy discussion of the Quic-specific attributes expected in a <code>&lt;html></code> tag.
						</p>
						<p>
							In this article, we'll begin by refreshing our memories of the <a href="#quic_bar">Quic bar</a>. We will take a look at what Quic 
							expects to find in the <code><a href="#head">&lt;head></a></code> and <code><a href="#body">&lt;body></a></code> tags. We will then 
							learn about <a href="#val_prvdr">value providers</a>. Finally, I will list all the custom tags (and their respective attributes) 
							defined in the assemblies packaged with this article so that you can start utilizing them in your web pages.
						</p>
						<p>
							To successfully follow the source codes in this framework, all you need is a healthy knowledge of C#. Two of the core namespaces
							used are <code>System.Xml.Linq</code> (I previously used <code>System.Xml</code>, but found it difficult retrieving line
							number and column number information) and 
							<code><a href="http://msdn.microsoft.com/en-us/library/system.reflection(v=vs.110.aspx)">System.Reflection</a></code> to help
							me load the relevant assemblies and classes.
						</p>

						<h2>Getting Started</h2>
						<h3>System Requirements</h3>
						<p>
							<ul>
								<li>The app was originally built on a Windows 8 machine, but should run with no modification on Windows 7 and Windows 10.</li>
								<li>The target framework is .NET Framework 4.5, but the source code can be built against many previous versions, as
								well as future versions.</li>
							</ul>
						</p>************************************************************************************
						<h3><a name="quic_bar" id="quic_bar">The Quic Bar<a/></h3>
						<p>
							I am assuming you have downloaded (and extracted files from) the relevant zip files.
							<ul>
								<li>
									Run the solution; the start-up project should be <em class="file-path">Quic.App</em>, so this should run the
									<em class="file-path">Quic.App.exe</em> executable.<br />
									<img width="600" height="59" src="./Quic2_files/quic_bar.png" />
								</li>
								<li>
									The Quic bar is an always-visible floating toolbar. It's size allows you to continue writing your markup in your
									preferred editor, returning easily to the bar whenever you are ready to build the file. When maximized, the bar is fixed
									at the top of your screen, but when in normal window mode (restored), it can be dragged to any location on the screen.<br />
									In building a file, custom recognizable tags in the file are interpreted/processed, similar to how a PHP interpreter/engine
									works on a PHP file. Unlike a PHP engine which may send the result of the processing to a browser, the Quic bar saves its 
									own result as an output file in the specified output directory, along with every other asset that was generated during the
									build.
								</li>
								<li>
									Using the Quic bar is easy. Having typed your markup in an editor of your choice, select the file (file extension is
									irrelevant), select your output directory, then click the <em>Build source file</em> button.<br />
									<img width="600" height="337" 
										src="./Quic2_files/quic_bar_build.png" />
								</li>
								<li>
									The <em>Show/hide notifications</em> button will have a green badge on it if the build was successful. Click the button
									to view any available notifications.<br />
									<img width="600" height="100" src="./Quic2_files/quic_bar_notif.png" />
								</li>
								<li>
									Click the <em>Open output directory</em> button to navigate to the output directory.<br />
									Notice the auto-generated files and folders in the output directory.</br />
									<img width="600" height="324" src="./Quic2_files/quic_bar_open_output_dir.png" />
								</li>
							</ul>
						</p>
						<h3>Using Quic Custom Tags on Your Web Pages</h3>
						
						<h4>Basic Structure</h4>
						<p>
							Because of the focus on HTML documents, Quic expects the root tag of the document to be <code>&lt;html></code>. 
							Quic expects your <code>&lt;html></code> tag to have <code>&lt;head></code> and <code>&lt;body></code> tags. These tags are always
							in lower case.<br />
							The <code>&lt;html></code> tag is expected to have certain attributes that determine how the document is processed. We will take
							a close look at the <code>&lt;html></code> tag in this article.<br />
							The <code>&lt;head></code> tag is expected to contain <em>resource elements</em>. These elements usually hold resources that
							can be used over and over in the document.<br />
							The <code>&lt;body></code> tag contains <em>UI elements</em>. Theses elements define the user interface of the document.<br />
							A sample Quic document is shown below.<br />
							<img width="600" height="590" src="./Quic2_files/ed.xml.png" /><br />
							The <code>&lt;head></code> and <code>&lt;body></code> tags will be looked into in the next article.
						</p>
						
						<h3><a name="head" id="head">The &lt;head> Tag</a></h3>
						<p>
							The <code>&lt;html></code> tag contains three classes of attributes relevant to Quic: 
							<ol>
							<li><a href="#namespace">Namespace attributes</a></li>
							<li><a href="#proc_opt">Processing option attributes</a></li>
							<li><a href="#out_file">Output file attribute</a></li>
							</ol>
						</p>
						
						<h3><a name="body" id="body">The &lt;body> Tag</a></h3>
						<h3><a name="val_prvdr" id="val_prvdr">Value Providers</a></h3>
						<h3><a name="manifest" id="manifest">A Proposal for a Manifest File</a></h3>
						
						<h4><a name="namespace" id="namespace">Namespace attributes</a></h4>
						<p>
							Namespace attributes define the namespaces utilized in the document. To explain namespaces we will work with the 
							<em>ed.xml</em> document shown above.
						</p>
						<p>
							We know that when Quic finds a tag in your document, it tries to find and instantiate an object of a class whose name matches the 
							tag name. How does Quic know where to search when trying to match a tag to a class? It does this by examining the XML namespace 
							(xmlns) attributes attached to the root <code>&lt;html></code> tag. These attributes hold the locations of assemblies and 
							namespaces from which Quic elements can be instantiated.
						</p>
						<p>
							If the value of a namespace attribute contains a colon (:), the part to the left of the colon identifies the file path
							(could be relative or absolute) of the assembly (typically a .DLL file) to search, and the part to the right of the colon 
							identifies the namespace to search. If the value of a namespace attribute contains no colon (:), then that value refers simply to 
							the file path of the assembly to search. This is typically used when you want to find classes that have no enclosing namespace 
							(like most classes in my <em class="file-path">Quic.Bootstrap.dll</em> assembly).
						</p>
						<p>
							Your Quic document contains tags without prefixes and tags with prefixes. When a tag without prefix is encountered, there are two
							possibilities:
							<ol>
							<li>
								The value of the default namespace attribute, <code>xmlns</code>, holds the assembly and the <em>namespace</em> of the class
								to instantiate, and the name of the class is the same as the name of the tag.<br />
								In our sample document, on line 13 you find the tag <code>&lt;UseBootstrap /></code> with no prefix. If you go up to line 3
								you find the default namespace attribute <code>xmlns="Quic.Bootstrap.dll"</code>. This means that the tag
								<code>&lt;UseBootstrap /></code> points to a class named <code>UseBootstrap</code> (with no containing namespace in this case)
								found in the assembly <em class="file-path">Quic.Bootstrap.dll</em> which, in this case, must be located in the same directory as 
								our sample document, as shown below:<br />
								<img width="600" height="240" src="./Quic2_files/test_dir.png" /><br />
								The same rule applies to other tags in the document like <code>&lt;Form></code>, <code>&lt;Grid></code>,
								<code>&lt;Row></code>, <code>&lt;Column></code>.
							</li>
							<li>
								There is a namespace attribute that matches this tag, and the value of that attribute holds the assembly and the
								<em><b>fully qualified name</b></em> (not just namespace, but namespace and class name) of the class to instantiate.<br />
								In our sample document above, on lines 22 and 23 you find the tags <code>&lt;radix></code> and <code>&lt;rad></code> with
								no prefix. If you go up to lines 6 and 7 you find the matching namespace attributes <code>xmlns:radix</code> and
								<code>xmlns:rad</code>. On further inspection you notice that both attributes have the same value
								<code>Quic.Ed.dll:Quic.Ed.Math.Radix</code>. This means that the tags <code>&lt;radix></code> and <code>&lt;rad></code> both
								point to the same class <code>Quic.Ed.Math.Radix</code> found in the assembly <em class="file-path">Quic.Ed.dll</em>
								which, in this case, must be located in the same directory as our sample document, as shown in the directory image above.
							</li>
							</ol>
						</p>
						<p>
							When a tag with prefix is encountered, Quic finds a namespace attribute that matches the <em>prefix</em> of the tag, and the
							value of that attribute holds the assembly and the <em>namespace</em> of the class to instantiate, and the name of the class is 
							the same as the name of the tag.<br />
							In our sample document, on line 21 you find the tag <code>&lt;math:Radix></code> with prefix <em>math</em>. If you go up to line 5
							you find the matching namespace attribute <code>xmlns:math="Quic.Ed.dll:Quic.Ed.Math"</code>. This means that the tag
							<code>&lt;math:Radix></code> points to a class named <code>Radix</code> in the namespace <code>Quic.Ed.Math</code>. Therefore,
							the full name of this class is <code>Quic.Ed.Math.Radix</code>, and it is found in the assembly 
							<em class="file-path">Quic.Ed.dll</em> located in the same directory as our sample document.<br />
							It, therefore, follows that the tags <code>&lt;math:Radix></code>, <code>&lt;radix></code> and <code>&lt;rad></code> all point
							to the same class. This becomes evident when you view the output file generated by Quic from this document.<br />
							<img width="600" height="125" src="./Quic2_files/ed.html.png" />
						</p>
						<p>
							Library owners should endeavour to make known the appropriate namespaces and classes available in their libraries. This could be
							via an XML document, like is done by Visual Studio. More on this in the next article(s).
						</p>
						
						<h4><a name="proc_opt" id="proc_opt">Processing option attributes</a></h4>
						<p>
							There are certain Quic-specific attributes that are expected in the <code>&lt;head></code> tag that determine how the page will be
							processed. Looking at the <em>ed.xml</em> document shown above, we see one of such attributes on line 9, 
							<code>IgnoreAttrbuteCase</code>. The list of processing option attrbutes (and their descriptions) is given below:
							<ul>
								<li>
								<b>AllowUnknownAttributes</b>: This is true by default. If true, this tells Quic not to throw an exception anytime it 
								encounters an attribute it does not understand. Such an attribute (and its value) will be left untouched by Quic.<br />
								I should mention here that, just as tags map to classes in the appropriate assemblies, attributes map to public, read-write 
								properties of those classes.
								</li>
								<li>
								<b>AllowUnknownTags</b>: This is true by default. If true, this tells Quic not to throw an exception anytime it 
								encounters a tag it does not understand. Such a tag will be left untouched by Quic.<br />
								There is a good reason why <code>AllowUnknownAttributes</code> and <code>AllowUnknownTags</code> attributes are true by default.
								This is to allow Quic parse regular (X)HTML documents that will surely contain tags and attributes that have no matchning classes
								and properties in any of the assemblies included in the document (via the namespace attributes). You can explicitly set them
								to false if you want your document to consist strictly of Quic-recognisable tags and attributes.
								</li>
								<li>
								<b>IgnoreAttrbuteCase</b>: This is false by default. If true, this tells Quic not to be case-sensitive when trying to match
								a tag attribute to a class property.
								</li>
								<li>
								<b>IgnoreTagCase</b>: This is false by default. If true, this tells Quic not to be case-sensitive when trying to match
								a tag to a class.<br />
								There is a good reason why <code>IgnoreAttrbuteCase</code> and <code>IgnoreTagCase</code> attributes are false by default.
								This is to make Quic case-sensitive. The rationale here is that your typical HTML tags and attributes should be written in
								lowercase while your Quic tags and attributes should be written in <em>pascal notation</em>, which is the same notation you
								would use for your class and public property names in C#. So, this would mean that <code>&lt;button></code> should be a HTML
								tag while <code>&lt;Button></code> should be a Quic tag.<br />
								Note that irrespective of the values of the <code>IgnoreAttrbuteCase</code> and <code>IgnoreTagCase</code> attributes, the
								<code>&lt;html></code>, <code>&lt;head></code> and <code>&lt;body></code> tags are always in lowercase, and the Quic-specific
								attributes found in the <code>&lt;html></code> tag are always written in pascal notation.
								</li>
							</ul>
						</p>
						
						<h4><a name="out_file" id="out_file">Output file attributes</a></h4>
						<p>
							Another Quic-specific attribute that is expected in the <code>&lt;html></code> tag is the <code>OutputFile</code> attribute, as
							seen on line 10 in the <em>ed.xml</em> document shown above. As you may have already guessed, this attribute describes the final
							output file that will be generated by Quic after all the relevant processing/preprocessing has been done.
						</p>
						<p>
							If the value of the attribute starts with a single opening brace and ends with a single closing brace (as seen in <em>ed.xml</em>),
							then the first part (<code>core:HtmlFile</code> in this case) points to a class that will initialize the output file, and the
							second part (<code>ed.html</code> in this case) is the name with which the output file will be saved in the output directory. Values
							of attributes defined this way are typically subject to the same rules of namespacing discussed in 
							<a href="#namespace">Namespace attributes</a> above. In this case, a class named <code>HtmlFile</code> will be loaded from
							the assembly <code>Quic.Core.dll</code> (as defined on line 4, <code>xmlns:core="Quic.Core.dll"</code>). This class is expected to
							derive from the class <code>Quic.FileInitializer</code> [<em class="file-path">Quic\FileInitializers\FileInitializer.cs</em>],
							found in <em>Quic.dll</em>.
						</p>
						<p>
							If you check the source codes for the project <em>Quic.Core</em> you will not find any class called <em>HtmlFile</em>. So what does Quic do?
							Anytime Quic doesn't find a file initializer it appends the strings <code>"Initializer"</code> or <code>"Initialiser"</code>, and
							performs the search again. So, in this case, Quic will then search for <em>HtmlFileInitializer</em>
							[<em class="file-path">Quic.Core\FileInitializers\HtmlFileInitializer.cs</em>], and will find it.<br />
							From the source code you can see that the class <code>HtmlFileInitializer</code> in project <em>Quic.Core</em> extends the class
							<code>Quic.HtmlFileInit</code> [<em class="file-path">Quic\FileInitializers\HtmlFileInit.cs</em>] in project <em>Quic</em>. 
							<code>Quic.HtmlFileInit</code> in turn extends <code>Quic.FileInitializer</code>.
							<br />
							The implemented method <code>InitializeFile</code> of <code>Quic.HtmlFileInit</code> initializes an output file as it deems fit:
<pre lang="cs" id="pre0" style="margin-top: 0px;">
<span class="code-keyword">public</span> <span class="code-keyword">override</span> <span class="code-type code-keyword">OutputFile</span> InitializeFile(<span class="code-type code-keyword">QuicDocument</span> doc, <span class="code-keyword">string</span> filename)
{
  <span class="code-type code-keyword">HtmlOutputFile</span> htmlOutputFile = <span class="code-keyword">new</span> <span class="code-type code-keyword">HtmlOutputFile</span>(filename);
  htmlOutputFile.CurrentSection = htmlOutputFile.HeadSection;
  
  <span class="code-comment">//put it in the output dir</span>
  <span class="code-keyword">if</span> (doc.OutputDirectory != <span class="code-keyword">null</span>)
    doc.OutputDirectory.Add(htmlOutputFile, <span class="code-keyword">true</span>);
    
  <span class="code-keyword">return</span> htmlOutputFile;
}
</pre>
							Your output file class (<code>Quic.HtmlOutputFile</code> [found in <em class="file-path">Quic\Core\Output\OutputFile.cs</em>] in the code 
							above) must derive from the class <code>Quic.TextFile</code> [found in <em class="file-path">Quic\Core\Output\OutputFile.cs</em>]
							found in <em>Quic.dll</em>.<br />
							See the output file generated in the output directory:<br />
							<img width="600" height="145" src="./Quic2_files/ed_out_file.png" /><br />
							Following the ideas presented here you can easily create and use your own file initilizers.
						</p>
						<p>
							If the value of the <code>OutputFile</code> attribute does <b>NOT</b> start with a single opening brace or does <b>NOT</b> end 
							with a single closing brace, your output file will be a plain text file and the entire value of the <code>OutputFile</code> attribute 
							is taken as the name of the file.
						</p>

						<h2>Points of interest</h2>
						<p>
							In this article I have introduced the Quic framework and discussed the tool available to utilize it. I have also started discussing
							the basic structure of a document that is supposed to be preprocessed by Quic. Although some source code snippets were displayed
							here, they will be discussed in more details in coming articles; the main purpose of this article is to get you aware of
							and interested in Quic, interested enough to go further and use it make the UI part of your web development a little easier.<br />
							In the next article(s) we will be talking about:
							<ul>
							<li>the <code>&lt;head></code> tag</li>
							<li>the <code>&lt;body></code> tag</li>
							<li>value providers</li>
							<li>understanding the Quic source code</li>
							<li>creating your own Quic elements</li>
							</ul>
						<p>

						<h2>License</h2>
						<div id="LicenseTerms">
						<p>
							This article, along with any associated source code and files, is licensed under 
							<a href="http://www.codeproject.com/info/cpol10.aspx" rel="license">The Code Project Open License (CPOL)</a>
						</p>
						</div><br>
						
					<div style="padding-top:8px">
						<a class="anchorLink" href="#_articleTop">Article Top</a>
					</div>
				</form>
			</div>
		</div> 
	</body>
</html>